{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"scilaunch","text":"<p>A tiny program for you that lays the foundation for great discoveries.</p> <p></p> <p> </p>"},{"location":"#description","title":"Description","text":"<p><code>scilaunch</code> helps you to set up your research project:</p> <ol> <li>it creates a canonical directory structure tailored for research projects     <pre><code>\ud83d\ude80 yourgreatstudy/\n\u251c\u2500\u2500 \ud83d\udcc4 README.md\n\u251c\u2500\u2500 \ud83d\udcc2 code\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc1 Rscripts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc1 configs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc2 notebooks\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udc0d yourgreatstudy.ipynb\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc1 tests\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc2 yourgreatstudy\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 \ud83d\udc0d __init__.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 \ud83d\udcc1 preprocessing\n\u251c\u2500\u2500 \ud83d\udcc2 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udccb participants.tsv\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc1 sub-01\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc1 sub-02\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc1 sub-03\n\u251c\u2500\u2500 \ud83d\udcc2 literature\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc1 pdfs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcd9 yourgreatstudy.bib\n\u251c\u2500\u2500 \ud83d\udcc2 organisation\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc1 ethics\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc1 participation_forms\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc1 preregistration\n\u251c\u2500\u2500 \ud83d\udcc2 publications\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc1 articles\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 \ud83d\udcc1 poster\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc1 presentations\n\u251c\u2500\u2500 \ud83d\udcc4 pyproject.toml\n\u251c\u2500\u2500 \ud83d\udcc2 results\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 \ud83d\udcc1 datavisualization\n\u2514\u2500\u2500 \ud83d\udc0d setup.py\n</code></pre></li> <li> <p><code>scilaunch</code> prepares your research code as <code>Python</code> package ready for <code>import</code></p> </li> <li> <p><code>scilaunch</code> offers to set up a <code>conda</code> environment, and prepares it as <code>jupyter</code> kernel</p> </li> <li> <p>and <code>scilaunch</code> can init your <code>git</code> repository</p> </li> </ol> <p>The project structure can be populated with other programming languages (<code>R</code>, <code>matlab</code>, etc.) as well.</p> <p>Check out the <code>scilaunch</code> documentation  \ud83d\ude80 for more information.</p>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#install-scilaunch","title":"Install <code>scilaunch</code>","text":"<p>Ideally install <code>scilaunch</code> into your global/base <code>Python</code> environment, which should be <code>python&gt;=3.8</code>.</p> <p>Install from PyPI: <pre><code>pip install -U scilaunch\n</code></pre></p> <p>Alternatively, install from the GitHub repo: <pre><code>pip install -U git+https://github.com/SHEscher/scilaunch.git\n</code></pre></p> <p>It is also recommended to have <code>conda</code> installed.</p>"},{"location":"#run-scilaunch","title":"\ud83d\ude80 Run <code>scilaunch</code>","text":"<p>Simply run <code>scilaunch</code> via the command line:</p> <pre><code># Assuming you are in the parent directory that should host your research project\nscilaunch\n</code></pre> <p>or provide the parent directory of your project by running:</p> <pre><code>scilaunch  PATH/TO/PARENT/DIR\n</code></pre> <p>Then, you will be asked to provide some information relevant to your project.</p> <p>When running <code>scilaunch</code> the first time, you will set some default values, which will ease your life for upcoming launches of research projects.</p> <p>You can still change these default values in <code>~/.cookiecutterrc</code> at a later stage.</p>"},{"location":"#cookiecutter-templates","title":"Cookiecutter templates","text":"<p><code>scilaunch</code> is a wrapper around the great <code>cookiecutter</code> package and is mainly built around this template: <code>research-project</code>.</p> <p>How to build your own template(s) and contribute to this project: please check out <code>CONTRIBUTING.md</code>.</p> <p>Note, after running <code>scilaunch</code> the first time, you can adapt your default values in <code>~/.cookiecutterrc</code> at any time. Check out the <code>cookiecutter</code> documentation for more information on the <code>~/.cookiecutterrc</code>.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#022","title":"0.2.2","text":"<ul> <li>simplify default settings</li> </ul>"},{"location":"changelog/#misc","title":"Misc","text":"<ul> <li>add a verbose option to declutter output</li> </ul>"},{"location":"changelog/#021","title":"0.2.1","text":"<ul> <li>add checks if boolean vars in <code>.cookiecutterrc</code> are set correctly to <code>true</code> or <code>false</code></li> </ul>"},{"location":"changelog/#misc_1","title":"Misc","text":"<ul> <li>add more info</li> </ul>"},{"location":"changelog/#020","title":"0.2.0","text":"<ul> <li>adapt to the <code>research-project</code> template version<code>2.0.0</code></li> </ul>"},{"location":"changelog/#misc_2","title":"Misc","text":"<ul> <li>add last-update badge to README.md</li> <li>add script to auto update last-update badge</li> <li>bump cookiecutter version to 2.5.0 to use nested configuration files</li> <li>switch some defaults to boolean values</li> </ul>"},{"location":"changelog/#012","title":"0.1.2","text":""},{"location":"changelog/#documentation","title":"Documentation","text":"<p>Init documentation using <code>Mkdocs</code> and <code>mkdocstrings</code>. More to come.</p>"},{"location":"changelog/#misc_3","title":"Misc","text":"<ul> <li>Tidy up <code>README.md</code></li> <li>Add <code>CHANGELOG.md</code></li> <li>Add <code>CONTRIBUTING.md</code></li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are very welcome, and credit will always be given!</p>"},{"location":"contributing/#templating","title":"Templating","text":"<p><code>scilaunch</code> is a wrapper around the template engine <code>cookiecutter</code>. That means, that the development of <code>scilaunch</code> is closely related to the development of the template <code>research-project</code>.</p> <p>To build your own templates, check out the <code>cookiecutter</code> docs. Feel free to fork &amp; adapt the research-project template. It is planned to optionally use other research-related templates in the future as well.</p>"},{"location":"contributing/#setup-for-development","title":"Setup for development","text":"<p>Fork &amp;/or clone the repo:</p> <pre><code>git clone https://github.com/SHEscher/scilaunch.git\n</code></pre> <p>Install the dependencies for development, ideally in a virtual environment in editable mode:</p> <pre><code>cd scilaunch\npip install -e \".[develop,docs]\"\n</code></pre> <p>At this stage, the project is small. Contributions via pull requests are welcome. A more comprehensive contribution guide will be added in the future, in case the project grows.</p>"},{"location":"contributing/#future-directions-todos","title":"Future directions &amp; ToDo's","text":"<ul> <li> extend <code>docs/</code></li> <li> add brief information &amp; recommendations to docs for all options to choose from</li> <li> create tutorial videos</li> <li> allow passing other <code>cookiecutter</code> templates</li> <li> optional: implement <code>scilaunch example --remove</code> or so to remove example files</li> <li> add files in <code>/.github/ISSUE_TEMPLATE/</code></li> <li> midterm ideas: <code>scilaunch</code> methods after project is initialized, e.g.:</li> <li> project specific <code>.scilaunch</code> file to save project settings</li> <li> <code>scilaunch add</code> e.g. LICENSE (runs only LICENSE template)</li> <li> <code>scilaunch docs</code> create docs website</li> <li> ...</li> </ul>"},{"location":"license/","title":"License","text":"<p>BSD License</p> <p>Copyright (c) 2023, Simon M. Hofmann All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li> <p>Redistributions of source code must retain the above copyright notice, this   list of conditions and the following disclaimer.</p> </li> <li> <p>Redistributions in binary form must reproduce the above copyright notice, this   list of conditions and the following disclaimer in the documentation and/or   other materials provided with the distribution.</p> </li> <li> <p>Neither the name of the copyright holder nor the names of its   contributors may be used to endorse or promote products derived from this   software without specific prior written permission.</p> </li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"reference/","title":"Index","text":""},{"location":"reference/#scilaunch","title":"scilaunch","text":"<p>Top-level package for <code>scilaunch</code>.</p> <p><code>scilaunch</code> should be run via the command line:</p> <pre><code>scilaunch PARENT/DIR\n</code></pre> <p>Alternatively, use Python's <code>-m</code> flag:</p> <pre><code>python -m scilaunch.main PARENT/DIR\n</code></pre> <p>Follow the instructions in the terminal to set up the research project.</p>"},{"location":"reference/configs/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> configs","text":""},{"location":"reference/configs/#scilaunch.configs","title":"configs","text":"<p>Configuration file for <code>scilaunch</code>.</p> <p>Relevant paths and links are stored in the form of a json file, which is loaded into a <code>box.Box</code> object.</p> <pre><code>_paths_json = {\n    \"templates\": {\n        \"local\": {\n            \"research_project\": \"~/.cookiecutters/research-project\",\n            \"cookiecutterrc\": f\"{Path(__file__).parent}/templates/cookiecutterrc\",\n        },\n        \"remote\": {\"research_project\": \"https://github.com/SHEscher/research-project.git\"},\n    }\n}\n</code></pre>"},{"location":"reference/main/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> main","text":""},{"location":"reference/main/#scilaunch.main","title":"main","text":"<p>Main module for scilaunch.</p>"},{"location":"reference/main/#scilaunch.main.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>Run the main function of <code>scilaunch</code>.</p> <p><code>scilaunch</code> should be run via the command line:</p> <pre><code>scilaunch\n</code></pre> <p>Optionally set the output directory with the <code>-o</code> or <code>--out-dir</code> flag. Or just add the output directory without any flags.</p> <pre><code>scilaunch PARENT/DIR\n</code></pre> <p>If no target/output directory is set, the current working directory is used as parent directory for the initialized research project.</p> Source code in <code>src/scilaunch/main.py</code> <pre><code>def main():\n    \"\"\"\n    Run the main function of `scilaunch`.\n\n    `scilaunch` should be run via the command line:\n\n        scilaunch\n\n    Optionally set the output directory with the `-o` or `--out-dir` flag.\n    Or just add the output directory without any flags.\n\n        scilaunch PARENT/DIR\n\n    If no target/output directory is set,\n    the current working directory is used as parent directory for the initialized research project.\n    \"\"\"\n    # Parse arguments\n    parser = argparse.ArgumentParser(description=\"Create a research project structure.\")\n    parser.add_argument(\"out\", type=str, nargs=\"?\", help=\"Target parent / output directory\", default=Path.cwd())\n    parser.add_argument(\"-o\", \"--out_dir\", type=str, help=\"Target parent / output directory\")\n    parser.add_argument(\"-v\", \"--verbose\", action=argparse.BooleanOptionalAction, default=False, help=\"verbose output\")\n\n    # Extract arguments with flags\n    FLAGS, _ = parser.parse_known_args()\n\n    # We use this to allow for both positional and flag arguments (since we just have this one argument)\n    if FLAGS.out_dir:\n        FLAGS.out = FLAGS.out_dir\n\n    # Create a directory structure for a research project\n    create(out_dir=FLAGS.out, verbose=FLAGS.verbose)\n\n    return 0\n</code></pre>"},{"location":"reference/project/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> project","text":""},{"location":"reference/project/#scilaunch.project","title":"project","text":"<p>Create project module for <code>scilaunch</code>.</p>"},{"location":"reference/project/#scilaunch.project.check_booleans_in_cookiecutterrc","title":"check_booleans_in_cookiecutterrc","text":"<pre><code>check_booleans_in_cookiecutterrc()\n</code></pre> <p>Check the validity of the <code>.cookiecutterrc</code> file.</p> Source code in <code>src/scilaunch/project.py</code> <pre><code>def check_booleans_in_cookiecutterrc():\n    \"\"\"Check the validity of the `.cookiecutterrc` file.\"\"\"\n    # Read .cookiecutterrc file (YAML)\n    with COOKIECUTTERRC.open() as f:\n        cookiecutterrc = yaml.safe_load(f)\n\n    # Read cookiecutter.json file (JSON)\n    with Path(path_to.templates.local.cookiecutterrc, \"cookiecutter.json\").open() as f:\n        cookiecutter_json = json.load(f)\n\n    # Check whether the cookiecutterrc file has the correct boolean types\n    updated = False\n    for key, default_val in cookiecutter_json.items():\n        if isinstance(default_val, bool):\n            crc_val = cookiecutterrc[\"default_context\"].get(key)\n            if isinstance(crc_val, bool):\n                continue\n\n            # Overwrite \"n\" -&gt; False and \"y\" -&gt; True\n            if isinstance(crc_val, str):\n                crc_val = _check_str_to_bool(crc_val)\n            if isinstance(crc_val, int):\n                crc_val = _check_int_to_bool(crc_val)\n            if not isinstance(crc_val, bool):\n                msg = (\n                    f\"Invalid type for '{key}': {crc_val} of type {type(crc_val)}.\"\n                    f\"\\nPlease check '{COOKIECUTTERRC}' and fill with valid boolean value.\"\n                )\n                raise TypeError(msg)\n\n            # Set updated boolean default value\n            cookiecutterrc[\"default_context\"][key] = default_val if crc_val is None else crc_val\n            updated = True\n\n    # Write updated .cookiecutterrc file (YAML)\n    if updated:\n        print(f\"\\033[33m\\nUpdating {COOKIECUTTERRC} boolean default values ...\\033[0m\")\n        with COOKIECUTTERRC.open(\"w\") as f:\n            yaml.dump(cookiecutterrc, f, sort_keys=False, indent=4)\n</code></pre>"},{"location":"reference/project/#scilaunch.project.create","title":"create","text":"<pre><code>create(out_dir, create_cc_rc=True, verbose=False, **kwargs)\n</code></pre> <p>Create the research project structure based on the <code>research-project</code> template.</p> <p>Parameters:</p> Name Type Description Default <code>out_dir</code> <code>str | pathlib.Path</code> <p>Path to the output directory.</p> required <code>create_cc_rc</code> <code>bool</code> <p>Whether to create the <code>.cookiecutterrc</code> file.</p> <code>True</code> <code>verbose</code> <code>bool</code> <p>Whether to print verbose output.</p> <code>False</code> <code>kwargs</code> <code>dict</code> <p>Keyword arguments passed to <code>cookiecutter</code>.</p> <code>{}</code> Source code in <code>src/scilaunch/project.py</code> <pre><code>def create(out_dir, create_cc_rc=True, verbose=False, **kwargs):\n    \"\"\"\n    Create the research project structure based on the `research-project` template.\n\n    :param out_dir: Path to the output directory.\n    :type out_dir: str or pathlib.Path\n    :param bool create_cc_rc: Whether to create the `.cookiecutterrc` file.\n    :param bool verbose: Whether to print verbose output.\n    :param dict kwargs: Keyword arguments passed to `cookiecutter`.\n    \"\"\"\n    # Create cookiecutterrc file (if not existing)\n    if create_cc_rc:\n        create_cookiecutterrc(verbose=verbose)\n\n    # Create project\n    print(f\"\\033[34m\\nStart creating a new research project structure in {out_dir} ...\\n\\033[0m\")\n    template = Path(path_to.templates.local.research_project).expanduser()\n    if not template.exists():\n        template = path_to.templates.remote.research_project\n    else:\n        # Check whether the template is up to date\n        if verbose:\n            print(f\"Checking whether '{template.name}' template is up-to-date ...\")\n        if not is_git_repo_up_to_date(path=template):  # run git fetch\n            answer = input(\n                f\"\\033[33m\\nYour local version of the '{template.name}' template is not up-to-date.\\n\"\n                f\"Do you want to update it now [y/n]: \\033[0m\"\n            )\n            if \"y\" in answer.lower():\n                # Run git pull\n                _ = Repo(template).remotes.origin.pull()\n                print(f\"\\033[32m\\nUpdated local version of the '{template.name}' template.\\n\\033[0m\")\n            else:\n                print(f\"\\033[33m\\nUsing local version of the '{template.name}' template.\\n\\033[0m\")\n        elif verbose:\n            print(f\"Your local version of the '{template.name}' template seems to be up-to-date.\\n\")\n\n    # Run cookiecutter on template\n    print(\"\\033[4m\\033[34m\\nProvide information about your research project:\\n\\033[0m\")\n    cookiecutter(template=str(template), overwrite_if_exists=False, output_dir=str(out_dir), **kwargs)\n</code></pre>"},{"location":"reference/project/#scilaunch.project.create_cookiecutterrc","title":"create_cookiecutterrc","text":"<pre><code>create_cookiecutterrc(verbose=False, **kwargs)\n</code></pre> <p>Create the <code>.cookiecutterrc</code> file.</p> <p>The <code>.cookiecutterrc</code> file is stored in the home directory \"<code>~</code>\" and contains default values for the <code>research-project</code> template.</p> <p>Fore more information on the <code>.cookiecutterrc</code> file check out the <code>cookiecutter</code> documentation.</p> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>bool</code> <p>Whether to print verbose output.</p> <code>False</code> <code>kwargs</code> <code>dict</code> <p>Keyword arguments passed to <code>cookiecutter</code>.</p> <code>{}</code> Source code in <code>src/scilaunch/project.py</code> <pre><code>def create_cookiecutterrc(verbose=False, **kwargs):\n    \"\"\"\n    Create the `.cookiecutterrc` file.\n\n    The `.cookiecutterrc` file is stored in the home directory \"`~`\"\n    and contains default values for the `research-project` template.\n\n    Fore more information on the `.cookiecutterrc` file check out the `cookiecutter`\n    [documentation](https://cookiecutter.readthedocs.io/en/stable/index.html).\n\n    :param bool verbose: Whether to print verbose output.\n    :param dict kwargs: Keyword arguments passed to `cookiecutter`.\n    \"\"\"\n    # Check whether .cookiecutterrc file exists in the home directory\n    if not COOKIECUTTERRC.exists():\n        # Create cookiecutterrc file\n        # Create cache dir\n        cache_dir = Path.home() / \".cache/scilaunch\"\n        cache_dir.mkdir(parents=True, exist_ok=True)\n\n        print(\n            f\"\\033[34m\\nSetting default values in {COOKIECUTTERRC} for your new projects. \"\n            f\"This should be done only once ...\\n\\n\"\n            f\"Note, except for the name and email, recommended defaults are in (*) \"\n            f\"and can be confirmed with just pressing Enter\\n\\033[0m\"\n        )\n        cookiecutter(template=path_to.templates.local.cookiecutterrc, output_dir=str(cache_dir), **kwargs)\n\n        # Move file to home directory\n        # Read cache dir from json\n        with Path(path_to.templates.local.cookiecutterrc, \"cookiecutter.json\").open() as f:\n            cache_dir = cache_dir / json.load(f).get(\"_cache_dir\")\n        (cache_dir / COOKIECUTTERRC.name).rename(COOKIECUTTERRC)\n\n        # Remove cache dir\n        cache_dir.rmdir()\n\n        # Report\n        print(f\"\\033[32m\\nCreated {COOKIECUTTERRC}\\n\\033[0m\")\n\n        # Print content\n        with COOKIECUTTERRC.open() as f:\n            print(f.read())\n\n        print(\n            f\"\\033[33m\\nIf you want to revise your defaults settings at a later stage, \"\n            f\"just edit the file: {COOKIECUTTERRC}.\\n\\033[0m\"\n        )\n\n    else:\n        check_booleans_in_cookiecutterrc()\n        if verbose:\n            print(f\"\\nUsing existing {COOKIECUTTERRC} to fill defaults.\\n\")\n</code></pre>"},{"location":"reference/project/#scilaunch.project.is_git_repo_up_to_date","title":"is_git_repo_up_to_date","text":"<pre><code>is_git_repo_up_to_date(path)\n</code></pre> <p>Check whether the local git repository at the given path is up to date.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | pathlib.Path</code> <p>Path to the local git repository.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the local git repository is up to date, False otherwise.</p> Source code in <code>src/scilaunch/project.py</code> <pre><code>def is_git_repo_up_to_date(path):\n    \"\"\"\n    Check whether the local git repository at the given path is up to date.\n\n    :param path: Path to the local git repository.\n    :type path: str or pathlib.Path\n    :return: True if the local git repository is up to date, False otherwise.\n    :rtype: bool\n    \"\"\"\n    repo = Repo(path)\n    upstream = repo.remotes.origin\n    try:\n        upstream.fetch(kill_after_timeout=10)  # run git fetch to update the remote-tracking branches\n    except GitCommandError as e:\n        additional_err_msg = (\n            \"\\033[31mUnable to fetch data from remote repository! Check your internet connection!\\033[0m\"\n        )\n        raise GitCommandError(str(e) + additional_err_msg) from e\n    return repo.head.commit == upstream.refs.main.commit\n</code></pre>"}]}